<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 1、扫描有注解的类，由Spring容器来进行管理 -->
    <!-- 扫描cn.ssm包以及子包下面所有的类 -->
    <context:component-scan base-package="cn.ssm">
    	<!-- 因为在Springmvc配置文件中实现了对Controller的管理，
    	这个时候Spring就可以不管它 -->
    	<context:exclude-filter type="annotation" 
    	expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <!-- <context:component-scan base-package="cn.ssm.dao"/>
    <context:component-scan base-package="cn.ssm.service"/> -->
    
    <!-- 2、因为我们是将数据源书写在配置文件中，加载配置文件 -->
    <context:property-placeholder location="classpath:datasource.properties"/>
    <!-- 3、配置数据源 -->
    <!-- 使用DBCP数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
    <!-- C3P0数据源的 -->
    <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> -->
    <!-- druid（阿里的数据源） -->
    <!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidAbstractDataSource"> -->
    	<property name="driverClassName" value="${driver}"></property>
    	<property name="username" value="${user}"></property>
    	<property name="url" value="${url}"></property>
    	<!-- C3P0的
    		driverClassName 换成 	driverClass
    		url				换成 	jdbcUrl
    		userName		换成		user
    	 -->
    	<property name="password" value="${password}"></property>
    	<property name="initialSize" value="${initialSize}"></property>
    	<!-- 现在的版本将maxActive改成了maxTotal属性 -->
    	<property name="maxTotal" value="${maxActive}"></property>
    	<property name="maxIdle" value="${maxIdle}"></property>
    	<property name="minIdle" value="${minIdle}"></property>
    	<!-- 现在的版本将maxWait改成了maxWaitMillis -->
    	<property name="maxWaitMillis" value="${maxWait}"></property>
    	<!-- 后面两个这个版本省略了，不用配置 -->
    	<!-- <property name="removeAbandoned" value="${removeAbandoned}"></property>
    	<property name="removeAbandonedTime" value="${removeAbandonedTime}"></property> -->
    	<!-- sql心跳包 -->
    	<!-- 进行循环的效验 -->
    	<property name="testWhileIdle" value="true"></property>
    	<property name="testOnBorrow" value="false"></property>
    	<property name="testOnReturn" value="false"></property>
    	<property name="validationQuery" value="select 1"></property>
    	<property name="timeBetweenEvictionRunsMillis" value="6000"></property>
    	<property name="numTestsPerEvictionRun" value="${maxActive}"></property>
    </bean>
    <!-- 4、 SqlSessionFactoryBean-->
    <bean id="sqlSessionFactory" 
    	class="org.mybatis.spring.SqlSessionFactoryBean">
    	<!-- 数据源 -->
    	<property name="dataSource" ref="dataSource"></property>
    	<!-- 为实体类进行别名的设置 -->
    	<property name="typeAliasesPackage" value="cn.ssm.pojo"></property>
    	<!-- 配置与实体类相映射的xml文件路径 -->
    	<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>
    <!-- 5、配置DAO层的操作，MapperScannerConfigN.. -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<!-- 配置操作接口的包全路径名 -->
    	<property name="basePackage" value="cn.ssm.dao"></property>
    	<!-- 指定SqlSessionFactoryBeanName -->
    	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    <!-- 6、配置事务增强类 -->
    <bean id="transactionManager"
     class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 7、配置事务增强方式 -->
    <!-- 基于注解方式的事务增强 -->
    <!-- <tx:annotation-driven/> -->
    <!-- 基于xml配置的事务增强 -->
	<!-- 为哪些方法添加事务增强的功能 -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<!-- 设置增强的方法 -->
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>    
    <!-- 8、配置AOP切面 -->
    <aop:config>
    	<!-- 定义切入点 -->
    	<aop:pointcut expression="execution(* cn.ssm..*(..))" id="myPointcut"/>
    	<!-- 将事务增加和aop进行融合 -->
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut"/>
    </aop:config>    
</beans>